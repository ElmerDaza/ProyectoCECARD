package Clases;

import java.awt.*;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import java.sql.*;
//import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
//import Clases.ClaseMetodos;
import java.util.Calendar;
import static Clases.ClaseMetodos.conectar;
import javax.swing.JOptionPane;
import java.awt.Color;

/**
 *
 * @author Acer
 */
public class RegistrarAlumno extends javax.swing.JFrame {

    /**
     * Creates new form RegistrarAlumno
     */
    //Variables a utilizar en boton continuar
    public int grado = 0;
    public String Grado_String = "";
    public String genero, documento;
    //esta variable contiene la informacion de esta ventana.
    public static String rey[][] = new String[3][3];

    ClaseMetodos c = new ClaseMetodos();
    Metodos m = new Metodos();

    public RegistrarAlumno() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Registrar Alumno ---CECARD---");

        //fondo de pantalla
        ImageIcon FondoDePantalla = new ImageIcon("src/IMG/fondoblanco.jpg");
        Icon icono = new ImageIcon(FondoDePantalla.getImage().getScaledInstance(Bakground.getWidth(),
                Bakground.getHeight(), Image.SCALE_DEFAULT));
        Bakground.setIcon(icono);

        //aca se colocan las imagenes en los Stiquer
        ImageIcon Stiq = new ImageIcon("src/IMG/AñadirAlumno.png");
        Icon icono2 = new ImageIcon(Stiq.getImage().getScaledInstance(Stiquer.getWidth(),
                Stiquer.getHeight(), Image.SCALE_DEFAULT));
        Stiquer.setIcon(icono2);
        
        //aca se colocan las imagenes en los Stiquer
        ImageIcon Stiq2 = new ImageIcon("src/IMG/AñadirAlumno.png");
        Icon icono3 = new ImageIcon(Stiq2.getImage().getScaledInstance(Stiquer2.getWidth(),
                Stiquer2.getHeight(), Image.SCALE_DEFAULT));
        Stiquer2.setIcon(icono3);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Nombre = new javax.swing.JTextField();
        Apellido = new javax.swing.JTextField();
        ValorPension = new javax.swing.JTextField();
        ValorMatricula = new javax.swing.JTextField();
        Edad = new javax.swing.JTextField();
        IdentificacionAlumno = new javax.swing.JTextField();
        H = new javax.swing.JTextField();
        SeleccionGrado = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        GeneroM = new javax.swing.JCheckBox();
        DocumentoRC = new javax.swing.JCheckBox();
        GeneroF = new javax.swing.JCheckBox();
        DocumentoTI = new javax.swing.JCheckBox();
        Stiquer = new javax.swing.JLabel();
        Stiquer2 = new javax.swing.JLabel();
        Bakground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sololetras(evt);
            }
        });
        getContentPane().add(Nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 200, 30));

        Apellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sololetras(evt);
            }
        });
        getContentPane().add(Apellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, 200, 30));

        ValorPension.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                soloNumeros(evt);
            }
        });
        getContentPane().add(ValorPension, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 200, 30));

        ValorMatricula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                soloNumeros(evt);
            }
        });
        getContentPane().add(ValorMatricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 200, 30));

        Edad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                soloNumeros(evt);
            }
        });
        getContentPane().add(Edad, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 200, 200, 30));

        IdentificacionAlumno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                soloNumeros(evt);
            }
        });
        getContentPane().add(IdentificacionAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 280, 200, 30));
        getContentPane().add(H, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 120, 60, 30));

        SeleccionGrado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Grado", "Maternal", "Parvulo", "Pre-Jardin", "Jardin", "Trancision", "Primero", "Segundo", "Tercero", "Cuarto", "Quinto" }));
        getContentPane().add(SeleccionGrado, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 420, 200, 30));

        jButton1.setText("CONTINUAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 510, -1, 35));

        jLabel11.setFont(new java.awt.Font("Cooper Black", 1, 16)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("SELECCIONE GRADO A CURSAR.");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 790, -1));

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel1.setText("NOMBRES.");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel3.setText("APELLIDOS.");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel4.setText("RH");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 100, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel5.setText("PENSION.");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel6.setText("EDAD.");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 180, -1, -1));

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel7.setText("GENERO.");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 180, -1, -1));

        jLabel8.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel8.setText("MATRICULA.");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, -1, -1));

        jLabel9.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel9.setText("IDENTIFICACIÓN.");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 260, -1, -1));

        jButton2.setText("x");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 40, 40));

        jLabel10.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel10.setText("TIPO DE DOCUMENTO.");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 260, -1, -1));

        jLabel2.setFont(new java.awt.Font("Cooper Black", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("REGISTRAR NUEVO ALUMNO.");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 790, -1));

        GeneroM.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        GeneroM.setText("M");
        GeneroM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneroMActionPerformed(evt);
            }
        });
        getContentPane().add(GeneroM, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 210, -1, -1));

        DocumentoRC.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DocumentoRC.setText("R.C");
        DocumentoRC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DocumentoRCActionPerformed(evt);
            }
        });
        getContentPane().add(DocumentoRC, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 290, -1, -1));

        GeneroF.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        GeneroF.setText("F");
        GeneroF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneroFActionPerformed(evt);
            }
        });
        getContentPane().add(GeneroF, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, -1, -1));

        DocumentoTI.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DocumentoTI.setText("T.I");
        DocumentoTI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DocumentoTIActionPerformed(evt);
            }
        });
        getContentPane().add(DocumentoTI, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 290, -1, -1));

        Stiquer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Continuar(evt);
            }
        });
        getContentPane().add(Stiquer, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 390, 130, 130));

        Stiquer2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Continuar(evt);
            }
        });
        getContentPane().add(Stiquer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 390, 130, 130));
        getContentPane().add(Bakground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        InterfazPrincipal I = new InterfazPrincipal();
        I.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        
        //Para comenzar siempre Validacion de be ser 0
        //validacion deve ser 0
        int Validacion = 0;
        int ValGenero = 0;
        int ValDocumento = 0,ValGrado = 0;
        //Codigo para obtener fecha
        // y se coloca aqui para que se efectue justo cuaando presione el boton
        Calendar fecha = Calendar.getInstance();
        int año = fecha.get(Calendar.YEAR);
        int dia = fecha.get(Calendar.DAY_OF_MONTH);
        int mes = fecha.get(Calendar.MONTH);
        int hora = fecha.get(Calendar.HOUR_OF_DAY);
        int min = fecha.get(Calendar.MINUTE);
        String day = c.DiaEnLetras(dia);
        String Mes = c.MesEnLetras(mes);
        String f = dia + "/" + Mes + "/" + año + "/ " + hora + ":" + min;

        
        //se Conbierte a String el iten actual del jComboBox
        grado = SeleccionGrado.getSelectedIndex();        

        //se ordena la informacion en una matriz 
        rey[0][0] = Nombre.getText().trim();
        rey[0][1] = Apellido.getText().trim();
        rey[0][2] = Edad.getText().trim();
        rey[1][0] = IdentificacionAlumno.getText().trim();
        rey[1][1] = H.getText().trim();
        rey[1][2] = ValorMatricula.getText().trim();
        rey[2][0] = ValorPension.getText().trim();

        //validacion del campo nombre.
        if (rey[0][0].equals("")) {
            
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            Nombre.setBackground(new Color(168,0,56));
            Nombre.setForeground(Color.white);
            //control de condiciones
            Validacion++;
        }
        //validacion del campo apellido
        if (rey[0][1].equals("")) {
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            Apellido.setBackground(new Color(168,0,56));
            Apellido.setForeground(Color.white);
            //control de condiciones.
            Validacion++;
        }
        //Validacion del campo edad
        if (rey[0][2].equals("")) {
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            Edad.setBackground(new Color(168,0,56));
            Edad.setForeground(Color.white);
            //Control de condiciones
            Validacion++;
        }

        //validacion del campo Identificacion
        if (rey[1][0].equals("")) {
            IdentificacionAlumno.setBackground(new Color(168,0,56));
            IdentificacionAlumno.setForeground(Color.white);
            Validacion++;
        }
        //Validacion del campo RH
        if (rey[1][1].equals("")) {
            H.setBackground(new Color(168,0,56));
            H.setForeground(Color.white);
            Validacion++;
        }
        //validacion del campo valor matricula.
        if (rey[1][2].equals("")) {
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            ValorMatricula.setBackground(new Color(168,0,56));
            ValorMatricula.setForeground(Color.white);
            //Control de condiciones
            Validacion++;
        }
        //validacion del campo valor pension.
        if (rey[2][0].equals("")) {
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            ValorPension.setBackground(new Color(168,0,56));
            ValorPension.setForeground(Color.white);
            //control de condiciones.
            Validacion++;
        }
        //Validacion de los dos checkBox de genero
        if (!GeneroM.isSelected() & !GeneroF.isSelected()) {
            //control de condiciones
            ValGenero = 2;
        }
        //Validacion de los dos checkBox de tipo de documento
        if (!DocumentoTI.isSelected() & !DocumentoRC.isSelected()) {
            ValDocumento = 1;
            
        }
        //validacion del jComboBox
        if (grado == 0) {
            ValGrado = 2;
        }
        
        //Se asigna A una Variable el grado en String
        if (grado == 1) {
            Grado_String = "Maternal";
        } else if (grado == 2) {
            Grado_String = "Parvulo";
        } else if (grado == 3) {
            Grado_String = "Pre-Jardin";
        } else if (grado == 4) {
            Grado_String = "Jardin";
        } else if (grado == 5) {
            Grado_String = "Trancision";
        } else if (grado == 6) {
            Grado_String = "Primero";
        } else if (grado == 7) {
            Grado_String = "Segundo";
        } else if (grado == 8) {
            Grado_String = "Tercero";
        } else if (grado == 9) {
            Grado_String = "Cuarto";
        } else if (grado == 10) {
            Grado_String = "Quinto";
        }

        //Si validacion es diferente de cero es porque falta informacion
        //aca se envia mensage de alerta en caso de faltar informacion.
        if (Validacion != 0 & Validacion <7 & ValGenero == 0 
                & ValGrado == 0 & ValDocumento == 0) {
            JOptionPane.showMessageDialog(null,
                    "Todos los campos son obligatorios, \npor favor llenar todos los campos.");
        } else if (Validacion == 0 & ValGenero != 0 
                & ValGrado == 0 & ValDocumento == 0){
            JOptionPane.showMessageDialog(null,
                    "Es necesario seleccionar genero del alumno.");
            
        } else if (Validacion == 0 & ValGenero == 0 
                & ValGrado != 0 & ValDocumento == 0){
            JOptionPane.showMessageDialog(null, 
                    "Seleccione un grado a cursar:");
            
        } else if (Validacion == 0 & ValGenero == 0 
                & ValGrado == 0 & ValDocumento != 0){
            JOptionPane.showMessageDialog(null,
                    "Es necesario seleccionar el tipo de documento del alumno");
            
        } else if (Validacion >= 7 & ValGenero != 0 
                & ValGrado != 0 & ValDocumento != 0){
            JOptionPane.showMessageDialog(null, 
                    "No se a ingresado ninguna información");
        }
        //captura de errores.
        try {
            
            //se consulta la base de datos para verificar que no se repita el numero de documento.
            
            //conexion con la base de datos.
            Connection cn = ClaseMetodos.conectar();
            //se dan las espesificaciones a la base de datos mysql
            PreparedStatement pst = cn.prepareStatement(
                    "select Documento from alumnos where Documento ='" + rey[1][0] + "'");
            //se ejecuta lo anterior
            ResultSet rs = pst.executeQuery();

            //Respuesta de la base de datos solo entra si hai resultados
            if (rs.next()) {
                //si coinside algun resultado se impide el paso con el control de condiciones 
                //y se pinta de rojo en campo
                IdentificacionAlumno.setBackground(Color.RED);
                JOptionPane.showMessageDialog(null,
                        "Este numerom de documento:" + rey[1][0] + " ya se encuentra Registrado.");
                cn.close();
                //control de condiciones,
                Validacion++;
                
            //si es negativa la consulta entonces no se repite el numero ID    
            } else {

                cn.close();
                
                //Si Las variables son diferente de cero es porque falta informacion
                if (Validacion == 0 && ValGenero == 0 
                & ValGrado == 0 & ValDocumento == 0) {

                    //Se pasa de String a int los datos numericos
                    int matricula = Integer.parseInt(rey[1][2]);//valor matricula
                    int pension = Integer.parseInt(rey[2][0]);//valor pension
                    int edad = Integer.parseInt(rey[0][2]);//edad
                    
                    //captura de errores
                    try {
                        //conexxion con la base de datos
                        Connection cn2 = conectar();
                        //se dan las espesificaciones a la base de datos mysql
                        PreparedStatement pst2 = cn2.prepareStatement("insert into alumnos values "
                                + "(?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?,?,?)");//28
                        //Se envia la informacion a la base de datos.
                        pst2.setInt(1, 0);
                        pst2.setString(2, rey[0][1]);
                        pst2.setString(3, rey[0][0]);
                        pst2.setString(4, rey[1][0]);
                        pst2.setString(5, documento);
                        pst2.setString(6, genero);
                        pst2.setString(7, f);
                        pst2.setInt(8, matricula);
                        //esto esta bacio porque debe llenarse en otra ventana
                        pst2.setString(9, "");
                        pst2.setString(10, "");
                        pst2.setString(11, "");
                        pst2.setString(12, "");
                        pst2.setString(13, "");
                        pst2.setString(14, "");
                        pst2.setString(15, "");
                        pst2.setString(16, "");
                        pst2.setString(17, "");
                        pst2.setString(18, "");
                        pst2.setString(19, "");
                        pst2.setString(20, "");
                        pst2.setInt(21, edad);
                        pst2.setString(22, rey[1][1]);
                        pst2.setInt(23, pension);
                        pst2.setString(24, Grado_String);
                        pst2.setDouble(25, 0);
                        pst2.setDouble(26, 0);
                        pst2.setString(27, "");
                        pst2.setString(28, "");

                        pst2.executeUpdate();
                        cn2.close();
                        c.Continuar();
                        this.setVisible(false);

                    } catch (SQLException e) {
                        Validacion++;

                        System.err.println("error al registrar alimno " + e);
                        JOptionPane.showMessageDialog(null, 
                                "Error en el sisteme contacte con el administrador.");
                    }
                }

            }
        } catch (SQLException e) {
            Validacion++;
            System.err.println("error en la conexion co la base de datos." + e);

            JOptionPane.showMessageDialog(null,
                    "Error al contactar con la base de datos, por favor comuniquese con el administrador.");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void GeneroMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneroMActionPerformed
        // TODO add your handling code here:
        if (GeneroM.isSelected()) {
            GeneroF.setEnabled(false);
            genero = "M";
        } else {
            GeneroF.setEnabled(true);
        }
    }//GEN-LAST:event_GeneroMActionPerformed

    private void GeneroFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneroFActionPerformed
        // TODO add your handling code here:
        if (GeneroF.isSelected()) {
            GeneroM.setEnabled(false);
            genero = "F";
        } else {
            GeneroM.setEnabled(true);
        }
    }//GEN-LAST:event_GeneroFActionPerformed

    private void DocumentoRCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DocumentoRCActionPerformed
        // TODO add your handling code here:
        if (DocumentoRC.isSelected()) {
            DocumentoTI.setEnabled(false);
            documento = "RC";
        } else {
            DocumentoTI.setEnabled(true);
        }
    }//GEN-LAST:event_DocumentoRCActionPerformed

    private void DocumentoTIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DocumentoTIActionPerformed
        // TODO add your handling code here:
        if (DocumentoTI.isSelected()) {
            DocumentoRC.setEnabled(false);
            documento = "TI";
        } else {
            DocumentoRC.setEnabled(true);
        }
    }//GEN-LAST:event_DocumentoTIActionPerformed

    private void sololetras(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sololetras
        // TODO add your handling code here:
        m.SoloLetras(evt);
    }//GEN-LAST:event_sololetras

    private void soloNumeros(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_soloNumeros
        // TODO add your handling code here:
        m.SoloNumeros(evt);
    }//GEN-LAST:event_soloNumeros

    private void Continuar(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Continuar
        // TODO add your handling code here:
        
        //Codigo para obtener fecha
        // y se coloca aqui para que se efectue justo cuaando presione el boton
        Calendar fecha = Calendar.getInstance();
        int año = fecha.get(Calendar.YEAR);
        int dia = fecha.get(Calendar.DAY_OF_MONTH);
        int mes = fecha.get(Calendar.MONTH);
        int hora = fecha.get(Calendar.HOUR_OF_DAY);
        int min = fecha.get(Calendar.MINUTE);
        String day = c.DiaEnLetras(dia);
        String Mes = c.MesEnLetras(mes);
        String f = dia + "/" + Mes + "/" + año + "/ " + hora + ":" + min;

        
        //se Conbierte a String el iten actual del jComboBox
        grado = SeleccionGrado.getSelectedIndex();

        //Para comenzar siempre Validacion de be ser 0
        //validacion deve ser 0
        int Validacion = 0;
        int ValGenero = 0;
        int ValDocumento = 0,ValGrado = 0;

        //se ordena la informacion en una matriz 
        rey[0][0] = Nombre.getText().trim();
        rey[0][1] = Apellido.getText().trim();
        rey[0][2] = Edad.getText().trim();
        rey[1][0] = IdentificacionAlumno.getText().trim();
        rey[1][1] = H.getText().trim();
        rey[1][2] = ValorMatricula.getText().trim();
        rey[2][0] = ValorPension.getText().trim();

        //validacion del campo nombre.
        if (rey[0][0].equals("")) {
            
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            Nombre.setBackground(new Color(168,0,56));
            Nombre.setForeground(Color.white);
            //control de condiciones
            Validacion++;
        }
        //validacion del campo apellido
        if (rey[0][1].equals("")) {
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            Apellido.setBackground(new Color(168,0,56));
            Apellido.setForeground(Color.white);
            //control de condiciones.
            Validacion++;
        }
        //Validacion del campo edad
        if (rey[0][2].equals("")) {
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            Edad.setBackground(new Color(168,0,56));
            Edad.setForeground(Color.white);
            //Control de condiciones
            Validacion++;
        }

        //validacion del campo Identificacion
        if (rey[1][0].equals("")) {
            IdentificacionAlumno.setBackground(new Color(168,0,56));
            IdentificacionAlumno.setForeground(Color.white);
            Validacion++;
        }
        //Validacion del campo RH
        if (rey[1][1].equals("")) {
            H.setBackground(new Color(168,0,56));
            H.setForeground(Color.white);
            Validacion++;
        }
        //validacion del campo valor matricula.
        if (rey[1][2].equals("")) {
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            ValorMatricula.setBackground(new Color(168,0,56));
            ValorMatricula.setForeground(Color.white);
            //Control de condiciones
            Validacion++;
        }
        //validacion del campo valor pension.
        if (rey[2][0].equals("")) {
            //Se pinta jTextField de rojo y se cambia la letra a blanco
            ValorPension.setBackground(new Color(168,0,56));
            ValorPension.setForeground(Color.white);
            //control de condiciones.
            Validacion++;
        }
        //Validacion de los dos checkBox de genero
        if (!GeneroM.isSelected() & !GeneroF.isSelected()) {
            //control de condiciones
            ValGenero++;
        }
        //Validacion de los dos checkBox de tipo de documento
        if (!DocumentoTI.isSelected() & !DocumentoRC.isSelected()) {
            ValDocumento++;
            
        }
        //validacion del jComboBox
        if (grado == 0) {
            ValGrado++;
        }
        
        //Se asigna A una Variable el grado en String
        if (grado == 1) {
            Grado_String = "Maternal";
        } else if (grado == 2) {
            Grado_String = "Parvulo";
        } else if (grado == 3) {
            Grado_String = "Pre-Jardin";
        } else if (grado == 4) {
            Grado_String = "Jardin";
        } else if (grado == 5) {
            Grado_String = "Trancision";
        } else if (grado == 6) {
            Grado_String = "Primero";
        } else if (grado == 7) {
            Grado_String = "Segundo";
        } else if (grado == 8) {
            Grado_String = "Tercero";
        } else if (grado == 9) {
            Grado_String = "Cuarto";
        } else if (grado == 10) {
            Grado_String = "Quinto";
        }

        //Si validacion es diferente de cero es porque falta informacion
        //aca se envia mensage de alerta en caso de faltar informacion.
        if (Validacion != 0 & ValGenero == 0 
                & ValGrado == 0 & ValDocumento == 0) {
            JOptionPane.showMessageDialog(null,
                    "Todos los campos son obligatorios, \npor favor llenar todos los campos.");
        } else if (Validacion == 0 & ValGenero != 0 
                & ValGrado == 0 & ValDocumento == 0){
            JOptionPane.showMessageDialog(null,
                    "Es necesario seleccionar genero del alumno.");
            
        } else if (Validacion == 0 & ValGenero == 0 
                & ValGrado != 0 & ValDocumento == 0){
            JOptionPane.showMessageDialog(null, 
                    "Seleccione un grado a cursar:");
            
        } else if (Validacion == 0 & ValGenero == 0 
                & ValGrado == 0 & ValDocumento != 0){
            JOptionPane.showMessageDialog(null,
                    "Es necesario seleccionar el tipo de documento del alumno");
            
        } else if (Validacion != 0 & ValGenero != 0 
                & ValGrado != 0 & ValDocumento != 0){
            JOptionPane.showMessageDialog(null, 
                    "No se a ingresado ninguna información");
        }
        //captura de errores.
        try {
            
            //se consulta la base de datos para verificar que no se repita el numero de documento.
            
            //conexion con la base de datos.
            Connection cn = ClaseMetodos.conectar();
            //se dan las espesificaciones a la base de datos mysql
            PreparedStatement pst = cn.prepareStatement(
                    "select Documento from alumnos where Documento ='" + rey[1][0] + "'");
            //se ejecuta lo anterior
            ResultSet rs = pst.executeQuery();

            //Respuesta de la base de datos solo entra si hai resultados
            if (rs.next()) {
                //si coinside algun resultado se impide el paso con el control de condiciones 
                //y se pinta de rojo en campo
                IdentificacionAlumno.setBackground(Color.RED);
                JOptionPane.showMessageDialog(null,
                        "Este numerom de documento:" + rey[1][0] + " ya se encuentra Registrado.");
                cn.close();
                //control de condiciones,
                Validacion++;
                
            //si es negativa la consulta entonces no se repite el numero ID    
            } else {

                cn.close();
                
                //Si Las variables son diferente de cero es porque falta informacion
                if (Validacion == 0 && ValGenero == 0 
                & ValGrado == 0 & ValDocumento == 0) {

                    //Se pasa de String a int los datos numericos
                    int matricula = Integer.parseInt(rey[1][2]);//valor matricula
                    int pension = Integer.parseInt(rey[2][0]);//valor pension
                    int edad = Integer.parseInt(rey[0][2]);//edad
                    
                    //captura de errores
                    try {
                        //conexxion con la base de datos
                        Connection cn2 = conectar();
                        //se dan las espesificaciones a la base de datos mysql
                        PreparedStatement pst2 = cn2.prepareStatement("insert into alumnos values "
                                + "(?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?,?, ?,?)");
                        //Se envia la informacion a la base de datos.
                        pst2.setInt(1, 0);
                        pst2.setString(2, rey[0][1]);
                        pst2.setString(3, rey[0][0]);
                        pst2.setString(4, rey[1][0]);
                        pst2.setString(5, documento);
                        pst2.setString(6, genero);
                        pst2.setString(7, f);
                        pst2.setInt(8, matricula);
                        //esto esta bacio porque debe llenarse en otra ventana
                        pst2.setString(9, "");
                        pst2.setString(10, "");
                        pst2.setString(11, "");
                        pst2.setString(12, "");
                        pst2.setString(13, "");
                        pst2.setString(14, "");
                        pst2.setString(15, "");
                        pst2.setString(16, "");
                        pst2.setString(17, "");
                        pst2.setString(18, "");
                        pst2.setString(19, "");
                        pst2.setString(20, "");
                        pst2.setInt(21, edad);
                        pst2.setString(22, rey[1][1]);
                        pst2.setInt(23, pension);
                        pst2.setString(24, Grado_String);
                        pst2.setDouble(25, 0);
                        pst2.setDouble(26, 0);

                        pst2.executeUpdate();
                        cn2.close();
                        c.Continuar();
                        this.setVisible(false);

                    } catch (SQLException e) {
                        Validacion++;

                        System.err.println("error al registrar alimno " + e);
                        JOptionPane.showMessageDialog(null, 
                                "Error en el sisteme contacte con el administrador.");
                    }
                }

            }
        } catch (SQLException e) {
            Validacion++;
            System.err.println("error en la conexion co la base de datos." + e);

            JOptionPane.showMessageDialog(null,
                    "Error al contactar con la base de datos, por favor comuniquese con el administrador.");
        }

        
    }//GEN-LAST:event_Continuar

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarAlumno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Apellido;
    private javax.swing.JLabel Bakground;
    private javax.swing.JCheckBox DocumentoRC;
    private javax.swing.JCheckBox DocumentoTI;
    private javax.swing.JTextField Edad;
    private javax.swing.JCheckBox GeneroF;
    private javax.swing.JCheckBox GeneroM;
    public javax.swing.JTextField H;
    private javax.swing.JTextField IdentificacionAlumno;
    private javax.swing.JTextField Nombre;
    public javax.swing.JComboBox<String> SeleccionGrado;
    private javax.swing.JLabel Stiquer;
    private javax.swing.JLabel Stiquer2;
    private javax.swing.JTextField ValorMatricula;
    private javax.swing.JTextField ValorPension;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables

}
